[package]
name = "beceeded"
version = "0.1.0"
edition = "2021"
authors = ["I.A. Intelligent", "Steffen L. Norgren"]
description = "A Rust implementation of ceed_parser, A high-performance tool for parsing and validating cryptocurrency seed phrases, mnemonics, and wallets."
readme = "README.md"
license = "MIT"

[dependencies]
# Core functionality
ring = "0.17.11"                # Cryptographic operations (replacement for OpenSSL)
thiserror = "2.0.11"           # Error handling - latest version
log = "0.4.26"                 # Logging interface
env_logger = "0.11.6"          # Logging implementation
rayon = "1.10.0"                # Parallel processing (replacement for thread_pool)
serde = { version = "1.0.218", features = ["derive"] } # Serialization/deserialization
serde_json = "1.0.139"         # JSON support
clap = { version = "4.5.3", features = ["derive"] } # Command line argument parsing
hex = "0.4.3"                  # Hex encoding/decoding
unicode-normalization = "0.1.23"  # Unicode normalization (NFKD for mnemonic phrases)

# Cryptocurrency support
secp256k1 = { version = "0.30.0", features = ["rand"] } # Bitcoin key operations
tiny-keccak = { version = "2.0.2", features = ["sha3"] } # Ethereum hashing
bs58 = "0.5.0"                  # Base58 encoding for Bitcoin addresses
ripemd = "0.1.3"               # RIPEMD160 hashing for Bitcoin addresses

# OCR functionality
leptess = { version = "0.14.0", optional = true }  # Tesseract OCR bindings
image = { version = "0.25.5", optional = true }    # Image processing
imageproc = { version = "0.25.0", optional = true } # Advanced image processing

# Memory and security
zeroize = { version = "1.8.1", features = ["derive"] } # Secure memory zeroing with derive feature
secrecy = "0.10.3"              # Handling sensitive data - specified version

# Add PBKDF2 implementation (if not already present)
pbkdf2 = "0.12.2"

# Database functionality
rusqlite = { version = "0.33.0", features = ["bundled", "sqlcipher"] } # SQLite for Rust with encryption support
dirs = "5.0.1"                  # Platform-specific directory paths
rpassword = "7.3.1"             # Password input without echoing to screen

# Scanner functionality
num_cpus = "1.16.0"             # CPU count detection for parallel processing
ctrlc = "3.4.4"                 # Signal handling for graceful shutdown
strsim = "0.11.0"               # String similarity for fuzzy matching
regex = "1.10.3"                # Regular expressions for pattern matching

# Document format support
zip = { version = "2.2.3", optional = true }      # ZIP file processing
pdf = { version = "0.9.0", optional = true }      # PDF parsing
quick-xml = { version = "0.37.2", optional = true } # For DOCX/XLSX parsing
tempfile = "3.17.1"                              # Needed for temp files when extracting

[dev-dependencies]
# We use criterion solely for benchmarking, not testing
criterion = { version = "0.5.1", features = ["html_reports"] }

# Standard Rust testing framework is used for unit tests
# PropTest is used when we need property-based testing
proptest = "1.6.0"             # Property-based testing with stochastic inputs

[[bench]]
name = "parser_benchmarks"
path = "benches/parser_benchmark.rs"
harness = false

[[bench]]
name = "scanner_benchmarks"
path = "benches/scanner_benchmarks.rs"
harness = false

[[bin]]
name = "bcscan"
path = "src/bin/bcscan.rs"

[profile.release]
lto = true                     # Link-time optimization
codegen-units = 1              # Slower compile, better optimization
panic = "abort"                # Smaller binary size
strip = true                   # Strip symbols from binary
debug = false                  # No debug symbols

[features]
default = []
# Add no_std feature for embedded contexts
no_std = []
# Add alloc feature for use with no_std
alloc = []
# OCR features
ocr = ["dep:leptess", "dep:image", "dep:imageproc"]
# Document format support
docx = ["dep:zip", "dep:quick-xml"]
xlsx = ["dep:zip", "dep:quick-xml"]
pdf_support = ["dep:pdf"]
archive = ["dep:zip"]
# Enable database encryption
encrypted_db = []
